{"version":3,"sources":["api/config.ts","api/customers-api.ts","components/BackArrow/index.tsx","api/utils-api.ts","pages/edit-customer.tsx","hooks/customer-by-id.ts"],"names":["portfolioApi","Axios","create","baseURL","customersGroupedByCity","a","get","data","customerById","customerId","customersByCity","city_id","page","params","city","createCustomer","customer","post","status","updateCustomer","patch","BackArrow","to","className","getAllCities","getAllCompanies","EditCustomer","id","useRouteMatch","useState","loading","setLoading","cities","setCities","companies","setCompanies","setCustomer","error","setError","alterField","useCallback","e","draft","target","name","value","useEffect","Promise","all","then","catch","console","finally","update","preventDefault","window","location","href","log","test","message","useLoadCustomerById","hidden","Loading","email","action","method","onSubmit","data-testid","htmlFor","type","defaultValue","first_name","onChange","last_name","map","i","company","titulation","gender","onClick"],"mappings":"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","file":"static/js/6.27794c24.chunk.js","sourcesContent":["import Axios from 'axios';\n\nexport const portfolioApi = Axios.create({\n  baseURL: 'http://localhost:8080'\n});\n","import { Customer, CustomerDTO, CustomersInCity, Page } from 'portfolio-domain';\nimport { portfolioApi } from './config';\n\nexport const customersGroupedByCity = async () => {\n  const {data} = await portfolioApi.get<CustomersInCity[]>('/customer/groupByCity');\n  return data;\n};\nexport const customerById = async (customerId: string) => {\n  const {data} = await portfolioApi.get<Customer>('/customer/'+customerId);\n  return data;\n};\n\nexport const customersByCity = async (city_id: string, page = 0) => {\n  const {data} = await portfolioApi.get<Page<Customer>>('/customer', {\n    params: {\n      city: city_id,\n      page: page\n    }\n  });\n  return data;\n};\n\nexport const createCustomer = async (customer: CustomerDTO) => {\n  const {status, data} = await portfolioApi.post('/customer', customer);\n  return {status, data};\n};\n\nexport const updateCustomer = async (customer: Customer) => {\n  const {status, data} = await portfolioApi.patch('/customer', customer);\n  return {status, data};\n};\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport const BackArrow = ({to}: {to: string}) => (\n  <Link to={to}>\n    <small className=\"text-indigo-400\"> &larr; voltar </small> &nbsp;\n  </Link>\n);\n","import { City, Company } from 'portfolio-domain';\nimport { portfolioApi } from './config';\n\nexport const getAllCities = async () => {\n  const {data} = await portfolioApi.get<City[]>('/city');\n  return data;\n};\n\nexport const getAllCompanies = async () => {\n  const {data} = await portfolioApi.get<Company[]>('/company');\n  return data;\n};\n","import React from 'react';\nimport { BackArrow } from '../components/BackArrow';\nimport { Loading } from '../components/Loading';\nimport { useLoadCustomerById } from '../hooks/customer-by-id';\n\nconst EditCustomer = () => {\n  const {\n    customer,\n    alterField,\n    cities,\n    error,\n    loading,\n    companies,\n    update\n  } = useLoadCustomerById();\n\n  return (\n    <>\n      <div hidden={!loading}>\n        <Loading/>\n      </div>\n      <div hidden={loading}>\n        <h2>\n          <BackArrow to={'/'}/>\n          Editar cliente {customer.email||''}\n        </h2>\n        <div className=\"px-2 mx-auto mb-10 max-w-sm\">\n          <form action=\"/customer\" method=\"post\" className=\"grid grid-flow-row\" onSubmit={()=>false}>\n            <div data-testid=\"first_name-container\">\n              <label htmlFor=\"first_name\">Primeiro nome:</label>\n              <input\n                type=\"text\"\n                name=\"first_name\"\n                id=\"first_name\"\n                defaultValue={customer.first_name}\n                onChange={alterField}\n              />\n            </div>\n            <div data-testid=\"last_name-container\">\n              <label htmlFor=\"last_name\">Segundo nome:</label>\n              <input\n                type=\"text\"\n                name=\"last_name\"\n                id=\"last_name\"\n                defaultValue={customer.last_name}\n                onChange={alterField}\n              />\n            </div>\n            <div data-testid=\"email-container\">\n              <label htmlFor=\"email\">E-mail:</label>\n              <input\n                type=\"text\"\n                name=\"email\"\n                id=\"email\"\n                defaultValue={customer.email}\n                onChange={alterField}\n              />\n            </div>\n            <div data-testid=\"city-container\">\n              <label htmlFor=\"city\">Cidade: </label>\n              <select onChange={alterField} defaultValue={customer.city} name=\"city\" id=\"city\">\n                <option value=\"0\">Selecione uma cidade</option>\n                {cities.map(i=>(\n                  <option key={i.id} value={i.id}>{i.name}</option>\n                ))}\n              </select>\n            </div>\n            <div data-testid=\"company-container\">\n              <label htmlFor=\"company\">Empresa: </label>\n              <select\n                onChange={alterField}\n                defaultValue={customer.company}\n                name=\"company\"\n                id=\"company\"\n              >\n                <option value=\"0\">Selecione uma empresa</option>\n                {companies.map(i=>(\n                  <option key={i.id} value={i.id}>{i.name}</option>\n                ))}\n              </select>\n            </div>\n            <div data-testid=\"titulation-container\">\n              <label htmlFor=\"titulation\">Titulação:</label>\n              <input\n                type=\"text\"\n                name=\"titulation\"\n                id=\"titulation\"\n                defaultValue={customer.titulation}\n                onChange={alterField}\n              />\n            </div>\n            <div data-testid=\"gender-container\">\n              <label htmlFor=\"gender\">Gênero:</label>\n              <div className=\"flex flex-col\">\n                <label htmlFor=\"male\">\n                  <input\n                    type=\"radio\"\n                    name=\"gender\"\n                    id=\"male\"\n                    defaultValue={customer.gender}\n                    onChange={alterField}\n                    value=\"male\"\n                  />&nbsp;\n                  Masculino\n                </label>\n                <label htmlFor=\"female\">\n                  <input\n                    type=\"radio\"\n                    name=\"gender\"\n                    id=\"female\"\n                    defaultValue={customer.gender}\n                    onChange={alterField}\n                    value=\"female\"\n                  />&nbsp;\n                  Feminino\n                </label>\n                <label htmlFor=\"uninformed\">\n                  <input\n                    type=\"radio\"\n                    name=\"gender\"\n                    defaultValue={customer.gender}\n                    id=\"uninformed\"\n                    onChange={alterField}\n                    value=\"uninformed\"\n                  />&nbsp;\n                  Não informar\n                </label>\n              </div>\n            </div>\n            <div className=\"p-2 bg-red-200 border-red-900 border-2\" hidden={error===null}>\n              <span className=\"text-black font-bold\">{error?.message||''}</span>\n            </div>\n            <div data-testid=\"submit-container\">\n              <button className=\"submit\" onClick={update} type=\"submit\">\n                Alterar informações\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditCustomer;\n","import { getAllCities, getAllCompanies } from 'api/utils-api';\nimport { updateCustomer } from 'api/customers-api';\nimport { City, Company, Customer } from 'portfolio-domain';\nimport { useEffect, useState, useCallback } from 'react';\nimport { useRouteMatch } from 'react-router';\nimport { customerById } from '../api/customers-api';\n\ntype Props = {\n  id?: string;\n}\n\ntype Event = React.ChangeEvent<HTMLInputElement|HTMLSelectElement>;\n\nexport const useLoadCustomerById = () => {\n  const {params:{id}} = useRouteMatch<Props>();\n  const [loading, setLoading] = useState(true);\n  const [cities, setCities] = useState([] as City[]);\n  const [companies, setCompanies] = useState([] as Company[]);\n  const [customer, setCustomer] = useState({} as Customer);\n  const [error, setError] = useState(null as {message:string}|null);\n\n  const alterField = useCallback((e: Event) => {\n    const draft = {...customer} as Record<string, unknown>;\n    draft[e.target.name] = e.target.value;\n    setCustomer(draft as Customer);\n  }, [customer]);\n\n  useEffect(() => {\n    Promise.all([\n      getAllCities(),\n      getAllCompanies(),\n      customerById(id as string)\n    ])\n      .then(e=> {\n        setCities(e[0]);\n        setCompanies(e[1]);\n        setCustomer(e[2]);\n      })\n      .catch(console.error)\n      .finally(()=>setLoading(false));\n  }, []);\n\n  const update = useCallback((e) => {\n    e.preventDefault();\n    updateCustomer(customer)\n      .then(({status, data}) => {\n        if(status === 202) {\n          window.location.href = '/customers-api';\n          return;\n        }\n        setError(data);\n      })\n      .catch(e => {\n        console.log(customer);\n        if(/409/.test(e.message)) {\n          setError({\n            message: 'Costumer email already created!'\n          });\n        }\n      });\n  }, [customer]);\n\n  return {\n    customer,\n    loading,\n    alterField,\n    companies,\n    cities,\n    error,\n    update\n  };\n};\n"],"sourceRoot":""}