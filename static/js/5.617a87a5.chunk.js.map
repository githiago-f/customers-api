{"version":3,"sources":["pages/create-customer.tsx","hooks/create-customer.tsx","api/config.ts","api/customers-api.ts","components/BackArrow/index.tsx","api/utils-api.ts","components/Form/Inptus/text.tsx","components/Form/Inptus/select.tsx"],"names":["CreateCustomer","useState","cities","setCities","companies","setCompanies","city","company","customer","setCustomer","error","setError","alterField","useCallback","e","draft","target","name","value","useEffect","Promise","all","getAllCities","getAllCompanies","then","catch","console","create","preventDefault","createCustomer","status","data","window","location","href","test","message","useCreateCustomer","BackArrow","to","className","action","method","onSubmit","id","first_name","onChange","label","last_name","email","options","map","i","key","titulation","data-testid","htmlFor","type","hidden","onClick","isProduction","process","hosts","PRODUCTION_URL","DEVELOPMENT_URL","portfolioApi","Axios","baseURL","customersGroupedByCity","a","get","customerById","customerId","customersByCity","city_id","page","params","post","updateCustomer","patch","TextInput","props","defaultValue","Select"],"mappings":"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","file":"static/js/5.617a87a5.chunk.js","sourcesContent":["import React from 'react';\nimport { useCreateCustomer } from 'hooks/create-customer';\nimport { BackArrow } from '../components/BackArrow';\nimport { TextInput } from 'components/Form/Inptus/text';\nimport { Select } from 'components/Form/Inptus/select';\n\nconst CreateCustomer = () => {\n  const {\n    customer,\n    alterField,\n    cities,\n    companies,\n    error,\n    create } = useCreateCustomer();\n  return (\n    <>\n      <h2>\n        <BackArrow to={'/'}/>\n        Criar cliente\n      </h2>\n      <div className=\"px-2 mx-auto mb-10 max-w-sm\">\n        <form action=\"/customer\" method=\"post\" className=\"grid grid-flow-row\" onSubmit={()=>false}>\n          <TextInput\n            name=\"first_name\"\n            id=\"first_name\"\n            value={customer.first_name}\n            onChange={alterField}\n            label=\"Primeiro nome:\"\n          />\n          <TextInput\n            name=\"last_name\"\n            id=\"last_name\"\n            value={customer.last_name}\n            onChange={alterField}\n            label=\"Sobrenome:\"\n          />\n          <TextInput\n            name=\"email\"\n            onChange={alterField}\n            value={customer.email}\n            id=\"email\"\n            label=\"E-mail:\"\n          />\n          <Select\n            id=\"city\"\n            label=\"Cidade\"\n            name=\"city\"\n            options={cities.map(i=>({key:i.id,label:i.name}))}\n            onChange={alterField}\n            value={customer.city}\n          />\n          <Select\n            label=\"Empresa:\"\n            name=\"company\"\n            id=\"company\"\n            options={companies.map(i=>({key:i.id,label:i.name}))}\n            onChange={alterField}\n            value={customer.company}\n          />\n          <TextInput\n            label=\"Titulação:\"\n            id=\"titulation\"\n            name=\"titulation\"\n            onChange={alterField}\n            value={customer.titulation}\n          />\n          <div data-testid=\"gender-container\">\n            <label htmlFor=\"gender\">Gênero:</label>\n            <div className=\"flex flex-col\">\n              <label htmlFor=\"male\">\n                <input\n                  type=\"radio\"\n                  name=\"gender\"\n                  id=\"male\"\n                  onChange={alterField}\n                  value=\"male\"\n                />&nbsp;\n                Masculino\n              </label>\n              <label htmlFor=\"female\">\n                <input\n                  type=\"radio\"\n                  name=\"gender\"\n                  id=\"female\"\n                  onChange={alterField}\n                  value=\"female\"\n                />&nbsp;\n                Feminino\n              </label>\n              <label htmlFor=\"uninformed\">\n                <input\n                  type=\"radio\"\n                  name=\"gender\"\n                  id=\"uninformed\"\n                  onChange={alterField}\n                  value=\"uninformed\"\n                />&nbsp;\n                Não informar\n              </label>\n            </div>\n          </div>\n          <div className=\"p-2 bg-red-200 border-red-900 border-2\" hidden={error===null}>\n            <span className=\"text-black font-bold\">{error?.message||''}</span>\n          </div>\n          <div data-testid=\"submit-container\">\n            <button className=\"submit\" onClick={create} type=\"submit\">\n              Criar\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default CreateCustomer;\n","import { createCustomer } from 'api/customers-api';\nimport { getAllCities, getAllCompanies } from 'api/utils-api';\nimport { City, Company, CustomerDTO } from 'portfolio-domain';\nimport React, { useCallback, useEffect, useState } from 'react';\n\ntype Event = React.ChangeEvent<HTMLInputElement|HTMLSelectElement>;\n\nexport const useCreateCustomer = () => {\n  const [cities, setCities] = useState([] as City[]);\n  const [companies, setCompanies] = useState([] as Company[]);\n  const [customer, setCustomer] = useState({\n    city: 0,\n    company: 0\n  } as CustomerDTO);\n  const [error, setError] = useState(null as {message:string}|null);\n\n  const alterField = useCallback((e: Event) => {\n    const draft = {...customer} as Record<string, unknown>;\n    draft[e.target.name] = e.target.value;\n    setCustomer(draft as CustomerDTO);\n  }, [customer]);\n\n  useEffect(() => {\n    Promise.all([getAllCities(), getAllCompanies()])\n      .then(e=> {\n        setCities(e[0]);\n        setCompanies(e[1]);\n      })\n      .catch(console.error);\n  }, []);\n\n  const create = useCallback((e) => {\n    e.preventDefault();\n    createCustomer(customer)\n      .then(({status, data}) => {\n        if(status === 201) {\n          window.location.href = '/customers-api';\n          return;\n        }\n        setError(data);\n      })\n      .catch(e => {\n        if(/409/.test(e.message)) {\n          setError({\n            message: 'Costumer email already created!'\n          });\n        }\n      });\n  }, [customer]);\n\n  return {\n    alterField,\n    customer,\n    cities,\n    companies,\n    create,\n    error\n  };\n};\n","import Axios from 'axios';\n\nexport const isProduction = process.env.NODE_ENV === 'production';\n\nexport const hosts = {\n  PRODUCTION_URL: 'https://customers-ghitiago.herokuapp.com/',\n  DEVELOPMENT_URL: 'http://localhost:8080'\n};\n\nexport const portfolioApi = Axios.create({\n  baseURL: isProduction ? hosts.PRODUCTION_URL : hosts.DEVELOPMENT_URL\n});\n","import { Customer, CustomerDTO, CustomersInCity, Page } from 'portfolio-domain';\nimport { portfolioApi } from './config';\n\nexport const customersGroupedByCity = async () => {\n  const {data} = await portfolioApi.get<CustomersInCity[]>('/customer/groupByCity');\n  return data;\n};\nexport const customerById = async (customerId: string) => {\n  const {data} = await portfolioApi.get<Customer>('/customer/'+customerId);\n  return data;\n};\n\nexport const customersByCity = async (city_id: string, page = 0) => {\n  const {data} = await portfolioApi.get<Page<Customer>>('/customer', {\n    params: {\n      city: city_id,\n      page: page\n    }\n  });\n  return data;\n};\n\nexport const createCustomer = async (customer: CustomerDTO) => {\n  const {status, data} = await portfolioApi.post('/customer', customer);\n  return {status, data};\n};\n\nexport const updateCustomer = async (customer: Customer) => {\n  const {status, data} = await portfolioApi.patch('/customer', customer);\n  return {status, data};\n};\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport const BackArrow = ({to}: {to: string}) => (\n  <Link to={to}>\n    <small className=\"text-indigo-400\"> &larr; voltar </small> &nbsp;\n  </Link>\n);\n","import { City, Company } from 'portfolio-domain';\nimport { portfolioApi } from './config';\n\nexport const getAllCities = async () => {\n  const {data} = await portfolioApi.get<City[]>('/city');\n  return data;\n};\n\nexport const getAllCompanies = async () => {\n  const {data} = await portfolioApi.get<Company[]>('/company');\n  return data;\n};\n","import React from 'react';\n\ntype Props = {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  label: string;\n  id: string;\n  name: string;\n  value?: string;\n}\n\nexport const TextInput = (props:Props) => {\n  return (\n    <div>\n      <label htmlFor={props.id}>{props.label}</label>\n      <input\n        type=\"text\"\n        name={props.name}\n        id={props.id}\n        defaultValue={props.value}\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Option = {\n  key?: string|number;\n  label?: string;\n}\n\ntype Props = {\n  label: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  name: string;\n  id: string;\n  options: Option[];\n  value?: string|number;\n};\n\nexport const Select = (props: Props) => {\n  return (\n    <div>\n      <label htmlFor={props.id}>{props.label}</label>\n      <select\n        onChange={props.onChange}\n        value={props.value}\n        name={props.name}\n        id={props.id}\n      >\n        {props.options.map(i=>(\n          <option key={i.key} value={i.key}>{i.label}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n"],"sourceRoot":""}