{"version":3,"sources":["../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/edit-customer.tsx","hooks/customer-by-id.ts","api/config.ts","api/customers-api.ts","components/BackArrow/index.tsx","api/utils-api.ts","components/Form/Inptus/text.tsx","components/Form/Inptus/select.tsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","EditCustomer","id","useRouteMatch","params","useState","loading","setLoading","cities","setCities","companies","setCompanies","customer","setCustomer","error","setError","alterField","useCallback","e","draft","target","name","value","useEffect","Promise","all","getAllCities","getAllCompanies","customerById","then","catch","console","finally","update","preventDefault","updateCustomer","status","data","window","location","href","log","test","message","useLoadCustomerById","hidden","Loading","BackArrow","to","email","className","action","method","onSubmit","first_name","onChange","label","last_name","options","map","i","key","city","company","titulation","data-testid","htmlFor","type","radioGroup","onClick","isProduction","process","hosts","PRODUCTION_URL","DEVELOPMENT_URL","portfolioApi","Axios","create","baseURL","customersGroupedByCity","a","get","customerId","customersByCity","city_id","page","createCustomer","post","patch","TextInput","props","defaultValue","Select"],"mappings":"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","file":"static/js/6.13ff7249.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\nimport { Select } from 'components/Form/Inptus/select';\nimport { BackArrow } from '../components/BackArrow';\nimport { Loading } from '../components/Loading';\nimport { useLoadCustomerById } from '../hooks/customer-by-id';\nimport { TextInput } from 'components/Form/Inptus/text';\n\nconst EditCustomer = () => {\n  const {\n    customer,\n    alterField,\n    cities,\n    error,\n    loading,\n    companies,\n    update\n  } = useLoadCustomerById();\n\n  return (\n    <>\n      <div hidden={!loading}>\n        <Loading/>\n      </div>\n      <div hidden={loading}>\n        <h2>\n          <BackArrow to={'/'}/>\n          Editar cliente {customer.email||''}\n        </h2>\n        <div className=\"px-2 mx-auto mb-10 max-w-sm\">\n          <form action=\"/customer\" method=\"post\" className=\"grid grid-flow-row\" onSubmit={()=>false}>\n            <TextInput\n              name=\"first_name\"\n              id=\"first_name\"\n              value={customer.first_name}\n              onChange={alterField}\n              label=\"Primeiro nome:\"\n            />\n            <TextInput\n              name=\"last_name\"\n              id=\"last_name\"\n              value={customer.last_name}\n              onChange={alterField}\n              label=\"Sobrenome:\"\n            />\n            <TextInput\n              name=\"email\"\n              onChange={alterField}\n              value={customer.email}\n              id=\"email\"\n              label=\"E-mail:\"\n            />\n            <Select\n              id=\"city\"\n              label=\"Cidade\"\n              name=\"city\"\n              options={cities.map(i=>({key:i.id,label:i.name}))}\n              onChange={alterField}\n              value={customer.city}\n            />\n            <Select\n              label=\"Empresa:\"\n              name=\"company\"\n              id=\"company\"\n              options={companies.map(i=>({key:i.id,label:i.name}))}\n              onChange={alterField}\n              value={customer.company}\n            />\n            <TextInput\n              label=\"Titulação:\"\n              id=\"titulation\"\n              name=\"titulation\"\n              onChange={alterField}\n              value={customer.titulation}\n            />\n            <div data-testid=\"gender-container\">\n              <label htmlFor=\"gender\">Gênero:</label>\n              <div className=\"flex flex-col\">\n                <label htmlFor=\"male\">\n                  <input\n                    type=\"radio\"\n                    name=\"gender\"\n                    id=\"male\"\n                    radioGroup=\"gender\"\n                    onChange={alterField}\n                    value=\"male\"\n                  />&nbsp;\n                  Masculino\n                </label>\n                <label htmlFor=\"female\">\n                  <input\n                    type=\"radio\"\n                    name=\"gender\"\n                    radioGroup=\"gender\"\n                    id=\"female\"\n                    onChange={alterField}\n                    value=\"female\"\n                  />&nbsp;\n                  Feminino\n                </label>\n                <label htmlFor=\"uninformed\">\n                  <input\n                    type=\"radio\"\n                    name=\"gender\"\n                    radioGroup=\"gender\"\n                    id=\"uninformed\"\n                    onChange={alterField}\n                    value=\"uninformed\"\n                  />&nbsp;\n                  Não informar\n                </label>\n              </div>\n            </div>\n            <div className=\"p-2 bg-red-200 border-red-900 border-2\" hidden={error===null}>\n              <span className=\"text-black font-bold\">{error?.message||''}</span>\n            </div>\n            <div data-testid=\"submit-container\">\n              <button className=\"submit\" onClick={update} type=\"submit\">\n                Alterar informações\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditCustomer;\n","import { getAllCities, getAllCompanies } from 'api/utils-api';\nimport { updateCustomer } from 'api/customers-api';\nimport { City, Company, Customer } from 'portfolio-domain';\nimport { useEffect, useState, useCallback } from 'react';\nimport { useRouteMatch } from 'react-router';\nimport { customerById } from '../api/customers-api';\n\ntype Props = {\n  id?: string;\n}\n\ntype Event = React.ChangeEvent<HTMLInputElement|HTMLSelectElement>;\n\nexport const useLoadCustomerById = () => {\n  const {params:{id}} = useRouteMatch<Props>();\n  const [loading, setLoading] = useState(true);\n  const [cities, setCities] = useState([] as City[]);\n  const [companies, setCompanies] = useState([] as Company[]);\n  const [customer, setCustomer] = useState({} as Customer);\n  const [error, setError] = useState(null as {message:string}|null);\n\n  const alterField = useCallback((e: Event) => {\n    const draft = {...customer} as Record<string, unknown>;\n    draft[e.target.name] = e.target.value;\n    setCustomer(draft as Customer);\n  }, [customer]);\n\n  useEffect(() => {\n    Promise.all([\n      getAllCities(),\n      getAllCompanies(),\n      customerById(id as string)\n    ])\n      .then(e=> {\n        setCities([\n          { id: 0, name: 'Selecione uma cidade'},\n          ...e[0]\n        ]);\n        setCompanies([\n          {id: 0, name: 'Selecione uma empresa'},\n          ...e[1]\n        ]);\n        setCustomer(e[2]);\n      })\n      .catch(console.error)\n      .finally(()=>setLoading(false));\n  }, []);\n\n  const update = useCallback((e) => {\n    e.preventDefault();\n    updateCustomer(customer)\n      .then(({status, data}) => {\n        if(status === 202) {\n          window.location.href = '/customers-api';\n          return;\n        }\n        setError(data);\n      })\n      .catch(e => {\n        console.log(customer);\n        if(/409/.test(e.message)) {\n          setError({\n            message: 'Costumer email already created!'\n          });\n        }\n      });\n  }, [customer]);\n\n  return {\n    customer,\n    loading,\n    alterField,\n    companies,\n    cities,\n    error,\n    update\n  };\n};\n","import Axios from 'axios';\n\nexport const isProduction = process.env.NODE_ENV === 'production';\n\nexport const hosts = {\n  PRODUCTION_URL: 'https://customers-ghitiago.herokuapp.com/',\n  DEVELOPMENT_URL: 'http://localhost:8080'\n};\n\nexport const portfolioApi = Axios.create({\n  baseURL: isProduction ? hosts.PRODUCTION_URL : hosts.DEVELOPMENT_URL\n});\n","import { Customer, CustomerDTO, CustomersInCity, Page } from 'portfolio-domain';\nimport { portfolioApi } from './config';\n\nexport const customersGroupedByCity = async () => {\n  const {data} = await portfolioApi.get<CustomersInCity[]>('/customer/groupByCity');\n  return data;\n};\nexport const customerById = async (customerId: string) => {\n  const {data} = await portfolioApi.get<Customer>('/customer/'+customerId);\n  return data;\n};\n\nexport const customersByCity = async (city_id: string, page = 0) => {\n  const {data} = await portfolioApi.get<Page<Customer>>('/customer', {\n    params: {\n      city: city_id,\n      page: page\n    }\n  });\n  return data;\n};\n\nexport const createCustomer = async (customer: CustomerDTO) => {\n  const {status, data} = await portfolioApi.post('/customer', customer);\n  return {status, data};\n};\n\nexport const updateCustomer = async (customer: Customer) => {\n  const {status, data} = await portfolioApi.patch('/customer', customer);\n  return {status, data};\n};\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport const BackArrow = ({to}: {to: string}) => (\n  <Link to={to}>\n    <small className=\"text-indigo-400\"> &larr; voltar </small> &nbsp;\n  </Link>\n);\n","import { City, Company } from 'portfolio-domain';\nimport { portfolioApi } from './config';\n\nexport const getAllCities = async () => {\n  const {data} = await portfolioApi.get<City[]>('/city');\n  return data;\n};\n\nexport const getAllCompanies = async () => {\n  const {data} = await portfolioApi.get<Company[]>('/company');\n  return data;\n};\n","import React from 'react';\n\ntype Props = {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  label: string;\n  id: string;\n  name: string;\n  value?: string;\n}\n\nexport const TextInput = (props:Props) => {\n  return (\n    <div>\n      <label htmlFor={props.id}>{props.label}</label>\n      <input\n        type=\"text\"\n        name={props.name}\n        id={props.id}\n        defaultValue={props.value}\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nexport type Option = {\n  key?: string|number;\n  label?: string;\n}\n\ntype Props = {\n  label: string;\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  name: string;\n  id: string;\n  options: Option[];\n  value?: string|number;\n};\n\nexport const Select = (props: Props) => {\n  return (\n    <div>\n      <label htmlFor={props.id}>{props.label}</label>\n      <select\n        onChange={props.onChange}\n        value={props.value}\n        name={props.name}\n        id={props.id}\n      >\n        {props.options.map(i=>(\n          <option key={i.key} value={i.key}>{i.label}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n"],"sourceRoot":""}